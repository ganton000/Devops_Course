pipeline {
	agent any

	environment {
		TF_IN_AUTOMATION='true'
		TF_CLI_CONFIG_FILE = credentials('tf-creds') // in Manage Jenkins -> Manage Credentials
		AWS_SHARED_CREDENTIALS_FILE = '/home/ubuntu/.aws/credentials'
	}

	stages {
		stage("Init") {
			steps {
				sh 'ls' // sh for shell
				sh 'cat $BRANCH_NAME.tfvars' // $BRANCH_NAME points to branch
				sh 'terraform init -no-color'
			}
		}
		stage("Plan") {
			steps {
				sh 'terraform plan -no-color -var-file="$BRANCH_NAME.tfvars"'
			}
		}
		stage("Validate Apply") {
			when {
				beforeInput true
				branch "dev"
			}
			input {
				message "Do you want to apply this plan?"
				ok "Apply this plan."
			}
			steps {
				echo "Apply Accepted"
			}
		}
		stage("Apply") {
			steps {
				sh 'terraform apply -auto-approve -no-color -var-file="$BRANCH_NAME.tfvars"'
			}
		}
		stage("EC2 Wait") {
			steps {
				sh 'aws ec2 wait instance-status-ok --region us-east-1'
			}
		}
		stage("Validate Ansible") {
			when {
				beforeInput true
				branch "dev"
			}
			input {
				message "Do you want to run Ansible?"
				ok "Run Ansible."
			}
			steps {
				echo "Ansible Accepted"
			}
		}
		stage("Ansible") {
			steps {
				// credentialsId -> Manage Jenkins -> Manage Credentials -> key
				ansiblePlaybook(
					credentialsId: 'ec2-ssh-key',
					inventory: aws_hosts,
					playbook: 'playbooks/main-playbook.yml')
			}
		}
		stage("Validate Destroy") {
			input {
				message "Do you want to destroy the stack?"
				ok "Destroy."
			}
			steps {
				echo "Destroy Accepted"
			}
		}
		stage("Destroy") {
			steps {
				sh 'terraform destroy -auto-approve -no-color -var-file="$BRANCH_NAME.tfvars"'
			}
		}
	}

	post {
		success {
			echo "Build ran successfully!"
		}
		failure {
			sh 'terraform destroy -auto-approve -no-color -var-file="$BRANCH_NAME.tfvars"'
		}
	}

	aborted {
		sh 'terraform destroy -auto-approve -no-color -var-file="$BRANCH_NAME.tfvars"'
	}
}